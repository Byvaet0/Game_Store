Game Store Backend
#Описание#
Этот проект представляет собой бэкенд для магазина видеоигр, написанный на языке C# с использованием технологий ASP.NET Core. Бэкенд предоставляет REST API для управления играми и их жанрами, включая добавление, удаление и редактирование записей в базе данных (CRUD).

Данные хранятся в базе данных SQLite, которая автоматически создается при запуске приложения. Проект включает в себя функционал для работы с играми и жанрами.

#Основные функции#:

-Добавление новой игры.
-Удаление игры.
-Редактирование игры.
-Получение списка всех игр.
-Получение списка жанров игр.

#Технологии#
-ASP.NET Core: Для создания REST API.
-Entity Framework Core: ORM для работы с базой данных.
-SQLite: Встроенная СУБД.
-CORS: Для разрешения междоменных запросов.


#Структура проекта#
Data: Каталог для работы с базой данных.

GameStoreContext.cs: Контекст базы данных, который включает таблицы игр (Games) и жанров (Genres).
Entities: Каталог с сущностями данных.

Game.cs: Модель игры, содержащая название, жанр, цену и дату выхода.
Genre.cs: Модель жанра игры.
Dtos: Каталог с объектами передачи данных.

CreateGameDto.cs: Для создания новой игры.
UpdateGameDto.cs: Для обновления данных игры.
GameSummaryDto.cs: Для представления краткой информации об игре.
GameDetailsDto.cs: Для отображения детальной информации об игре.
GenreDto.cs: Для передачи данных о жанрах.
Endpoints: Каталог с реализацией API эндпоинтов.

#GamesEndpoints.cs: Эндпоинты для управления играми:#
-Получение списка всех игр.
-Получение данных об игре по ID.
-Добавление новой игры.
-Редактирование игры.
-Удаление игры.

#GenresEndpoints.cs: Эндпоинты для получения списка жанров.#
-Mapping: Каталог с функциями для преобразования между сущностями и DTO.

GameMapping.cs: Конвертация между Game и соответствующими DTO.
GenreMapping.cs: Конвертация между Genre и DTO.
Program.cs: Точка входа в приложение. Настраивает контекст базы данных, маршруты для эндпоинтов и автоматическую миграцию базы данных.


------------------------------------------------------------------------------------------------------------------------------------
Как запустить проект
Настройте подключение к базе данных в appsettings.json или задайте строку подключения в коде (Program.cs).
Запустите проект. База данных SQLite будет создана автоматически, если ее нет.
Используйте Postman или другой инструмент для выполнения HTTP-запросов к REST API(например просто в файле games.http нажать правой кнопкой мыши на запрос и выбрать "отправить запрос"). Примеры запросов:
GET /games: Получить список всех игр.
POST /games: Добавить новую игру.
PUT /games/{id}: Обновить информацию об игре.
DELETE /games/{id}: Удалить игру.
GET /genres: Получить список жанров.



#Заключение#
Этот проект демонстрирует базовые принципы создания REST API с использованием ASP.NET Core, работы с базами данных через Entity Framework Core, а также организации архитектуры проекта.
